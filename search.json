[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "{SET} group",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} group\n\n\n\n\n\nThis is the professional website for the SET group, maintained by Kyle P Messier. For Kyle and the SET group’s official NIH/NIEHS government website please visit here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The common theme of the Spatiotemporal Exposures and Toxicology group (a.k.a. SET group) is spatial statistics methods and applications in population-level exposure and risk assessment. As an investigator in the Division of Translational Toxicology, Dr. Kyle P Messier is expanding to include the integration of toxicological methods into geospatial exposure and risk models. The long-term goals are to use integrated geospatial and toxicological data and methods (1) to characterize the large-scale, population-level internal exposome, (2) to model the source-to-outcome continuum for complex mixtures, and (3) utilize these risk assessment tools to improve lives with an emphasis on historically disadvantaged communities and susceptible populations.\n\n\n\nThe Spatiotemporal Exposures and Toxicology group in October 2023. Top Row: Eva Marques, Daniel Zilber, Ranadeep Daw, Mariana Alifa. Bottom Row: Insang Song, Kyle Messier\n\n\n\n\n\n{SET}grp logo. { } is a nod to mathematical set notation. Thanks to the NIEHS Office of Communications and Public Liaison for the design."
  },
  {
    "objectID": "index.html#environmental-exposure-assessment-and-mechanistically-informed-risk-assessments-using-spatiotemporal-statistics",
    "href": "index.html#environmental-exposure-assessment-and-mechanistically-informed-risk-assessments-using-spatiotemporal-statistics",
    "title": "Spatiotemporal Exposures and Toxicology",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} grp"
  },
  {
    "objectID": "index.html#the-setgrp-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "href": "index.html#the-setgrp-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "title": "Spatiotemporal Exposures and Toxicology",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} grp"
  },
  {
    "objectID": "people.html",
    "href": "people.html",
    "title": "People",
    "section": "",
    "text": "Kyle P Messier is a Stadtman Tenure-Track Investigator at the National Institute of Environmental Health Sciences (NIEHS) in the Division of Translational Toxicology (DTT). He leads the Spatiotemporal Exposures and Toxicology group, {SET}grp, within the Predictive Toxicology Branch. He also holds a joint appointment with the National Institute of Minority Health and Health Disparities (NIMHD) in Bethesda, Maryland and a secondary appointment in the NIEHS Biostatistics and Computational Biology Branch. Messier received a B.S. in Environmental Studies from the University of North Carolina at Asheville and a M.S. and Ph.D. from the University of North Carolina at Chapel Hill."
  },
  {
    "objectID": "people.html#KPM",
    "href": "people.html#KPM",
    "title": "People",
    "section": "",
    "text": "Kyle P Messier is a Stadtman Tenure-Track Investigator at the National Institute of Environmental Health Sciences (NIEHS) in the Division of Translational Toxicology (DTT). He leads the Spatiotemporal Exposures and Toxicology group, {SET}grp, within the Predictive Toxicology Branch. He also holds a joint appointment with the National Institute of Minority Health and Health Disparities (NIMHD) in Bethesda, Maryland and a secondary appointment in the NIEHS Biostatistics and Computational Biology Branch. Messier received a B.S. in Environmental Studies from the University of North Carolina at Asheville and a M.S. and Ph.D. from the University of North Carolina at Chapel Hill."
  },
  {
    "objectID": "people.html#MAK",
    "href": "people.html#MAK",
    "title": "People",
    "section": "Mariana Alifa",
    "text": "Mariana Alifa\n\n\n\nDr. Mariana Alifa research interets lie at the nexus of environment and society. She has experience in air quality modeling, health effect quantification, uncertainty assessment, and space-time geospatial data resources. Currently, Dr. Alifa Kassien is working on novel physics informed neural networks for atmospheric dispersion models of data sparse chemicals. She also has interest in science education and outreach where she is working on developing knowledge and dissemination materials on climate change and health effects."
  },
  {
    "objectID": "people.html#RD",
    "href": "people.html#RD",
    "title": "People",
    "section": "Ranadeep Daw",
    "text": "Ranadeep Daw\n\n\n\nDr. Ranadeep Daw has comprehensive training throughout my bachelor’s, master’s, and doctoral studies in Statistics, both methodological and applied areas of Statistics. He has experience in methodologies for spatiotemporal data aggregation and low-rank scalable modeling, applying these in the exploration of diverse datasets from satellite, survey, environmental, and meteorological data sources. Currently, he is developing a novel spatially explicit tree and Gaussian process based boosting model aimed at making interpretable models with predictive performance competitive with advanced machine learning models."
  },
  {
    "objectID": "people.html#ESM",
    "href": "people.html#ESM",
    "title": "People",
    "section": "Eva Marques",
    "text": "Eva Marques\n\n\n\nDr. Eva Marques is an applied geostatistician with a primary focus in urban climatology. She uses Bayesian and machine learning methods to predict climate exposures such as the urban heat island effect. She holds a MS in Applied Math from the National Institute of Applied Sciences (INSA) in Toulouse, France, and a PhD in Urban Climatology from the National Meteorlogical Center in Toulouse, France."
  },
  {
    "objectID": "people.html#IS",
    "href": "people.html#IS",
    "title": "People",
    "section": "Insang Song",
    "text": "Insang Song\n\n\n\nDr. Insang Song is spatial scientist interested in the impact of socioenvironmental nexus on human health. He has a BA and MS in Geography from Seoul National University in Korea and PhD in Geography from the University of Oregon. His current research projects include developing scalable GIS software for climate and health, hybrid air pollution modeling, and mental health impacts from climate related exposures."
  },
  {
    "objectID": "people.html#DZ",
    "href": "people.html#DZ",
    "title": "People",
    "section": "Daniel Zilber",
    "text": "Daniel Zilber\n\n\n\nDr. Zilber is a postdoctoral fellow working on novel statistical methods to predict chemical mixtures. As a card-carrying Bayesian he has broad interest in Bayesian modeling in Biostatistics, kernel methods and stochastic processes, deep learning vs statistics vs quantum probability. He has a BS in Math from UNC Chapel Hill, a MS in Operations Research from Stanford University, and PhD in Statistics from Texas A&M University."
  },
  {
    "objectID": "people.html#MM",
    "href": "people.html#MM",
    "title": "People",
    "section": "Mitchell Manware",
    "text": "Mitchell Manware\n\n\n\nMr. Mitchell Manware holds a BS in Business and Health Care Management from the University of Connecticut and a MPH from the Yale School of Public Health. He has experience in geospatial data analysis, public health data visualization, and policy-oriented writing. Currently, he is a geospatial analyst in climate change and health funded by the Climate and Health Outcomes Research Data Systems (CHORDS) project where is developing geospatial tools and educational resources focused on environment, climate, and health."
  },
  {
    "objectID": "index.html#the-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "href": "index.html#the-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "title": "Spatiotemporal Exposures and Toxicology",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} group"
  },
  {
    "objectID": "index.html#the-spatiotemporal-exposures-and-toxicology-group-i.e.-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "href": "index.html#the-spatiotemporal-exposures-and-toxicology-group-i.e.-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "title": "{SET} group",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} group\n\n\n\n\n\nThis is the professional website for the SET group, maintained by Kyle P Messier. For Kyle and the SET group’s official NIH/NIEHS government website please visit here."
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "{SET}grp",
    "section": "",
    "text": "The following is a list of software and tools that we have developed or contributed to.\n\n\n\nNo.\nPackage Name\nDescription\nStatus\n\n\n\n\n1.\namadeus\nA Machine for Data, Environments, and User Setup for common environmental and climate health datasets is an R package developed to improve and expedite users’ access to large, publicly available geospatial datasets.\n\n\n\n2.\nbeethoven\nBuilding an Extensible, Reproducible, Test-driven, Harmonized, Open-source, Versioned, Ensemble model for air quality is an R package developed to facilitate the development of ensemble models for air quality.\n\n\n\n3.\nchopin\nComputation for Climate and Health research On Parallelized Infrastructure automates parallelization in spatial operations with chopin functions as well as sf/terra functions.\n\n\n\n4.\nGeoTox\nGeoTox, or source-to-outcome, modeling framework with an S3 object-oriented approach. Facilitates the calculation and visualization of single and multiple chemical risk at individual and group levels.\n\n\n\n5.\nRGCA\nImplements Reflected Generalized Concentration Addition: A geometric, piecewise inverse function for 3+ parameter sigmoidal models used in chemical mixture concentration-response modeling.\n\n\n\n6.\nPrestoGP\nScalable penalized regression on spatio-temporal outcomes using Gaussian processes. Designed for big data, large-scale geospatial exposure assessment, and geophysical modeling."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "2023\n\nIchan School of Medicine, Department of Environmental Medicine and Public Health Grand Rounds Seminar, 2023-11-08\n\n\n\n2024\n\nNational Institute on Minority Health and Health Disparities, Division of Intramural Research Seminar Series, 2024-01-09\nNational Cancer Institute, Geospatial Analysis Working Group Seminar, 2024-01-12\nUNC Chapel Hill, Environmental Science and Engineering Guest Lecture, 2024-02-22\nExposure on Time: Deploying exposure modelins in a timely manner, Clinical and Environmental Health Data Workshop, 2024-02-23\nGeospatial Methodologies in Toxicology: Linking exposure, toxicity, and disease profiles to identify U.S. regions at elevated health risks, Society of Toxicology Annual Meeting and ToxExpo, 2024-03-11"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#about-us-setgroup",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#about-us-setgroup",
    "title": "GeoTox and RGCA",
    "section": "About Us: {SET}group",
    "text": "About Us: {SET}group\n\n\nSpatiotemporal Exposure Mapping \\[ y \\sim GP(X\\beta, \\Sigma) \\]\nChemical and Stressor Mixtures Prediction \\[ \\frac{[A]}{f_A^{-1}(R)}+\\frac{[B]}{f_B^{-1}(R)} = 1\n\\]\nMechanistically Informed Risk Assessment \\[  R = f(c|\\alpha,\\theta, \\beta) = \\frac{\\alpha}{1+\\left (  \\frac{\\theta}{x}\\right )^\\beta }\n\\]"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#about-us-setgroup-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#about-us-setgroup-1",
    "title": "GeoTox and RGCA",
    "section": "About Us: {SET}group",
    "text": "About Us: {SET}group\n\n\n\n\n\nEva Marques\nDaniel Zilber\nRanadeep Daw\nMariana Alifa\nInsang Song\nKyle Messier\nMitchell Manware (Not Pictured)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#a-necessary-cascade-for-exogoneous-risk-factors",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#a-necessary-cascade-for-exogoneous-risk-factors",
    "title": "GeoTox and RGCA",
    "section": "A Necessary Cascade for Exogoneous Risk Factors",
    "text": "A Necessary Cascade for Exogoneous Risk Factors\n\n\nExogenous Sources\nExternal Exposure\nInternal Exposure\nMolecular Targets and Events\nCellular and Tissue Effects\nIndividual Outcomes\nPopulation Outcomes"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#getting-two-frameworks-to-work-together",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#getting-two-frameworks-to-work-together",
    "title": "GeoTox and RGCA",
    "section": "Getting Two Frameworks to Work Together",
    "text": "Getting Two Frameworks to Work Together\n\nAggregate Exposure Pathways\nAEP is a comprehensive external analysis of source, media, and transformations\n\n\nAdverse Outcome Pathway\nAOPs provide a linkage specific biological target, pathway or process by a stressor and an adverse outcome(s) considered relevant to risk assessment"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#getting-two-frameworks-to-work-together-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#getting-two-frameworks-to-work-together-1",
    "title": "GeoTox and RGCA",
    "section": "Getting Two Frameworks to Work Together",
    "text": "Getting Two Frameworks to Work Together\n\n\n\\[\n\\LARGE{GeoTox = AEP + AOP}\n\\]"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] \n\n\n\n\n\n\n\nA forward, exposure-based approach for mixtures risk modeling\nExposure modeling provides a geospatial foundation for risk assessment"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-1",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-2",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-2",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-3",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-3",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-4",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-4",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-5",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#key-steps-of-geotox-5",
    "title": "GeoTox and RGCA",
    "section": "Key Steps of GeoTox",
    "text": "Key Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-proof-of-concept",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-proof-of-concept",
    "title": "GeoTox and RGCA",
    "section": "GeoTox Proof of Concept",
    "text": "GeoTox Proof of Concept\n\n\n \n\n Dr. Kristin Eccles, Former Visiting Fellow in DTT and SET, Now at Health Canada"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#making-geotox-f.a.i.r.",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#making-geotox-f.a.i.r.",
    "title": "GeoTox and RGCA",
    "section": "Making GeoTox F.A.I.R.",
    "text": "Making GeoTox F.A.I.R.\n\n\nFindable: Publicly available via GitHub, CRAN, NIEHS websites\nAccessible: Open-Source, Easy installation\nInteroperable: Integrate with current and future applications\nReusable: Documentation and reproducible pipelines"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-development",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-development",
    "title": "GeoTox and RGCA",
    "section": "GeoTox Development",
    "text": "GeoTox Development\n\n\n\nCurrently developing (experimental or not-stable)\nSubmitting to CRAN\nStatic website hosted via {SET}group website\nMaintained\nExtensible for future development\n\n\n\n\n\nDr David Reif, Predictive Toxicology Branch, Senior Scientist and Branch Chief\n\n\n\n\n\nDr Skylar Marvel, Predictive Toxicology Branch, Bioinformatic Scientist"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-simulating-data",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-simulating-data",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Simulating Data",
    "text": "GeoTox: Simulating Data\n# Age\nage &lt;- simulate_age(split(geo_tox_data$age, ~FIPS), n = MC_iter)\n\n# Obesity status\nobesity &lt;- simulate_obesity(geo_tox_data$obesity, n = MC_iter)\n\n# Inhalation rate\nIR &lt;- simulate_inhalation_rate(age)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-simulating-data-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-simulating-data-1",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Simulating Data",
    "text": "GeoTox: Simulating Data\n# Age\nage &lt;- simulate_age(split(geo_tox_data$age, ~FIPS), n = MC_iter)\n\n# Obesity status\nobesity &lt;- simulate_obesity(geo_tox_data$obesity, n = MC_iter)\n\n# Inhalation rate\nIR &lt;- simulate_inhalation_rate(age)\n\n# External exposure concentration\nC_ext &lt;- simulate_exposure(split(geo_tox_data$exposure, ~FIPS), n = MC_iter)\n\n# Sample from pre-simulated steady-state plasma concentration data\nC_ss &lt;- sample_Css(geo_tox_data$simulated_css, age, obesity)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Core Functions",
    "text": "GeoTox: Core Functions\n# Internal dose\nD_int &lt;- calc_internal_dose(C_ext, IR, scaling = 1 / 1000)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions-1",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Core Functions",
    "text": "GeoTox: Core Functions\n# Internal dose\nD_int &lt;- calc_internal_dose(C_ext, IR, scaling = 1 / 1000)\n\n# in vitro concentration\nC_invitro &lt;- calc_invitro_concentration(D_int, C_ss)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions-2",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-core-functions-2",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Core Functions",
    "text": "GeoTox: Core Functions\n# Internal dose\nD_int &lt;- calc_internal_dose(C_ext, IR, scaling = 1 / 1000)\n\n# in vitro concentration\nC_invitro &lt;- calc_invitro_concentration(D_int, C_ss)\n\n# Concentration response\nresp &lt;- calc_concentration_response(C_invitro, hill_2_params)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-documentation",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-documentation",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Documentation",
    "text": "GeoTox: Documentation\n# Internal dose\nD_int &lt;- calc_internal_dose(C_ext, IR, scaling = 1 / 1000)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-documentation-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-documentation-1",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Documentation",
    "text": "GeoTox: Documentation\n# Internal dose\nD_int &lt;- calc_internal_dose(C_ext, IR, scaling = 1 / 1000)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-dose-response",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-dose-response",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Dose-Response",
    "text": "GeoTox: Dose-Response\n\nhill_2_params &lt;- fit_hill(data)\nplot_hill(hill_2_params)\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-dose-response-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-dose-response-1",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Dose-Response",
    "text": "GeoTox: Dose-Response\n\nhill_3_params &lt;- fit_hill(data, fixed_slope = FALSE)\nplot_hill(hill_3_params)\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-map-visualization",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-map-visualization",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Map Visualization",
    "text": "GeoTox: Map Visualization\n\n  resp &lt;- resp_df %&gt;% filter(health_measure == \"GCA.Eff\")\n  legend_name &lt;- paste(\"Predicted Response\", \"Log2 Fold Change\", \"mRNA Expression\",sep = \" \")\n  make_county_heatmap(resp, legend_name)"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-under-development",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-under-development",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Under Development",
    "text": "GeoTox: Under Development\n\n\nIndividual/Person Level Analysis\nGeneral Grouping or Areal Analysis\nLikely migrating to an object-oriented approach\n\n\n\n\n\n\ngraph TB;\n\n    style P1 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n    style P2 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n    style P3 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n    style P4 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n    style P5 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n    style P6 fill:#91bcfd , stroke:#333, stroke-width:2px, rounded:true;\n\n    style G1 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G2 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G3 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G4 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G5 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G6 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n    style G7 fill:#588b3e, stroke:#333, stroke-width:2px, rounded:true;\n\n    P1[Person] --&gt; |Simulate, Sample| P2[Person, External Exposure];\n    G1[Group] --&gt; |Simulate, Sample| G2[Group, External Exposure];\n    P2[Person, External Exposure] --&gt; |Summarize, Simulate, Sample| G2[Group, External Exposure];\n    P2[Person, External Exposure] --&gt; |Calc_Internal_Dose| P3[Person, Internal Exposure];\n    P3[Person, Internal Exposure] --&gt; |Summarize| G3[Group, Internal Exposure];\n    G2[Group, External Exposure] --&gt; |Calc_Internal_Dose| G3[Group, Internal Exposure];\n    P3[Person, Internal Exposure] --&gt; |httk::| P4[Person, Target Organ Dose];\n    G3[Group, Internal Exposure]--&gt; |httk::| G4[Group, Target Organ Dose];\n    P4[Person, Target Organ Dose] --&gt; |summarize| G4[Group, Target Organ Dose];\n    P4[Person, Target Organ Dose] --&gt; |calc_invitro_conc| P5[Person, Invitro Concentration];\n    G4[Group, Target Organ Dose]--&gt; |calc_invitro_conc| G5[Group, Invitro Concentration];\n    P5[Person, Invitro Concentration] --&gt; |summarize| G5[Group, Invitro Concentration];\n    P5[Person, Invitro Concentration] --&gt; |calc_concentration_response| P6[Person, Mixture Response];\n    G5[Group, Invitro Concentration]--&gt; |calc_concentration_response| G6[Group, Mixture Response];\n    P6[Person, Mixture Response]--&gt; |summarize, sample, simulate| G6[Group, Mixture Response];\n    G6[Group, Mixture Response]--&gt; |plot, map| G7[Group, Mixture Response Risk Map];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox",
    "title": "GeoTox and RGCA",
    "section": "Revisiting the Steps of GeoTox",
    "text": "Revisiting the Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox-1",
    "title": "GeoTox and RGCA",
    "section": "Revisiting the Steps of GeoTox",
    "text": "Revisiting the Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox-2",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#revisiting-the-steps-of-geotox-2",
    "title": "GeoTox and RGCA",
    "section": "Revisiting the Steps of GeoTox",
    "text": "Revisiting the Steps of GeoTox\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Independent Action| F[Concentration Response];\n    E[In vitro Equivalent Concentration] --&gt; F[Concentration Response];\n    E[In vitro Equivalent Concentration] --&gt; |Concentration Addition| F[Concentration Response];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-motivation",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-motivation",
    "title": "GeoTox and RGCA",
    "section": "RGCA Motivation",
    "text": "RGCA Motivation\n\nInfinite Mixture Problem: There are infinitely many possible mixtures and we can’t test them all\nIndependent vs Additive: No clear approach for general mixtures\nSomething from Nothing: Independently safe chemicals can combine to form a hazardous mixture"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-notation",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-notation",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Notation",
    "text": "RGCA: Notation\nWe assume a parametric model for interpretability: \\[ r_i(c) =f_i(c|a_i,\\theta_i,\\beta_i) = \\frac{a_i}{1+\\left(\\frac{\\theta_i}{c}\\right)^{\\beta_i}}\\] where:\n\n\\(r_i\\): toxic effect or response of chemical \\(i\\)\n\\(c\\): concentration of a chemical, later indexed by chemical \\(i\\)\n\\(a_i\\): sill or maximum effect parameter\n\\(\\theta_i\\): dissociation constant or EC50 value\n\\(\\beta_i\\): slope parameter"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-common-mixture-models",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-common-mixture-models",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Common Mixture Models",
    "text": "RGCA: Common Mixture Models\n\nConcentration Addition, CA (Loewe, Isobole): effective total dose adjusted for potency \\[ \\sum_i \\frac{c_i}{EC_i(R)} = 1\\] Intuition: ``How much \\(c_2\\) do I need to get response \\(R\\) under chem 1 given \\(c_1\\)” \\[EC_1(R) = c_1 + c_2 \\frac{EC_1(R)}{EC_2(R)}\\]"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Partial Agonists",
    "text": "RGCA: Partial Agonists\nPartial agonists are the major limitation of traditional CA\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-1",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Partial Agonists",
    "text": "RGCA: Partial Agonists\nPartial agonists are the major limitation of traditional CA\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Times New Roman' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Times New Roman' not found, will use 'sans' instead"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-2",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-2",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Partial Agonists",
    "text": "RGCA: Partial Agonists\nGCA (Howard and Webster, 2009) substitutes \\(f^{-1}_i(R)\\) for \\(EC_i(R)\\) and solves for \\(R\\) to balance the equation given \\(c_i\\)’s: \\[\\sum_i \\frac{c_i}{f_i^{-1}(R)} = 1\\]\n\nFor the Hill model with slope \\(\\beta_i = 1\\), we get a hyperbolic function: \\[ R=f_i(c) = \\frac{a_i}{1+\\left(\\frac{\\theta_i}{c}\\right)^{\\beta_i}} = \\frac{c \\cdot a_i}{c+ \\theta_i}  \\] \nSo: when \\(R&gt;a_1\\), \\(c&lt;0\\)!\nA large toxic effect of the mixture requires small concentrations of chemical 1."
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-3",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-partial-agonists-3",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Partial Agonists",
    "text": "RGCA: Partial Agonists\nThe GCA trick can be used with \\(\\beta = 1\\) because the inverse is still defined for \\(R&gt;a\\): \\[f^{-1}(R) = \\frac{\\theta}{\\left(\\frac{a}{R}-1\\right)^{1/\\beta}} = \\frac{\\theta}{\\frac{a}{R}-1} \\] \nFor most \\(\\beta\\), the inverse at \\(R&gt;a\\) is undefined because it contains a root of a negative value. We propose a series of reflections to have a well-defined inverse"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-piecewise-inverse-function",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-piecewise-inverse-function",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Piecewise Inverse Function",
    "text": "RGCA: Piecewise Inverse Function\n\n\n\n\n\nDaniel Zilber, PhD, Postdoctoral Fellow\n\n\n\n\\[\n\\begin{equation} \\label{eq:Hill_reflected_inverse}\nf^{-1}(r | \\alpha&gt;0, \\theta, \\beta&gt;0) =\n\\begin{cases}\n   \\frac{- \\theta}{1+\\left (\\frac{-\\alpha}{r} \\right)^{1/\\beta}} & r \\in (-\\infty, 0)\\\\\n\\theta \\left (\\frac{\\alpha}{r} -1 \\right)^{-1/\\beta} & r \\in[0, \\alpha)\\\\\n  -2\\theta - \\theta\\left (\\frac{\\alpha}{2\\alpha - r} -1 \\right)^{-1/\\beta} & r \\in (\\alpha, 2\\alpha)\\\\\n    -2\\theta + \\frac{\\theta}{1+\\left(\\frac{\\alpha}{r-2\\alpha} \\right)^{1/\\beta}} & r \\in (2\\alpha, \\infty)\\\\\n\\end{cases}\n\\end{equation}\n\\]"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-piecewise-inverse-function-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-piecewise-inverse-function-1",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Piecewise Inverse Function",
    "text": "RGCA: Piecewise Inverse Function\n\n\nThis inverse provides a wide enough support to satisfy the invertibility requirements of GCA"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-summary",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-summary",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Summary",
    "text": "RGCA: Summary\n\nIA and CA represent two extremes of mixture prediction\nGCA extends CA to partial agonists but requires a slope of 1\nWe can extend GCA to not require slope 1: RGCA\nNon-unit slope allows for additional post-hoc analyses like clustering on slope, curve, etc.\nDaniel Zilber and Kyle P Messier, Reflected Generalized Concentration Addition and Bayesian Hierarchical Models to Improve Chemical Mixture Prediction, PLOS One, In-Press"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-future-work",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-future-work",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Future Work",
    "text": "RGCA: Future Work\nBoth IA and CA are additive: there is no interaction. One approach is to rescale GCA (Jonker et al. 2005):\n\\[ \\sum \\frac{c_i}{f_i^{-1}(R)} = \\exp{g(Z)}, \\quad g(Z) = a \\prod z_i \\] where the \\(z_i\\) is a toxic unit, \\(z_i = c_i/f_i^{-1}(a/2)\\).\n\nWe considered the following quadratic version, with a matrix \\(A\\) to be specified by QSAR: \\[g(Z) = -\\frac{1}{2}z^\\top A z\\] But it is not clear how to determine \\(A\\) from QSAR. Also, this approach is symmetric: there is no dominant chemical."
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-extensible-software",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-extensible-software",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Extensible Software",
    "text": "RGCA: Extensible Software"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-extensible-software-1",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#rgca-extensible-software-1",
    "title": "GeoTox and RGCA",
    "section": "RGCA: Extensible Software",
    "text": "RGCA: Extensible Software"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-rgca-integration",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-rgca-integration",
    "title": "GeoTox and RGCA",
    "section": "GeoTox + RGCA Integration",
    "text": "GeoTox + RGCA Integration\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];\n    \n\n\n\n\n\n\n\nRGCA"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#extensible-geotox",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#extensible-geotox",
    "title": "GeoTox and RGCA",
    "section": "Extensible GeoTox",
    "text": "Extensible GeoTox\n\nLooking forward, there are many ways to improve GeoTox mixture risk assessment\nBetter handling of time\nMore and better resolved AOPs!"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-temporal-feedback",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-temporal-feedback",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: Temporal Feedback",
    "text": "GeoTox: Temporal Feedback\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];\n    F[Concentration Response] --&gt; C[Internal Exposure] ;"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-with-complete-aops",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#geotox-with-complete-aops",
    "title": "GeoTox and RGCA",
    "section": "GeoTox: With Complete AOPs",
    "text": "GeoTox: With Complete AOPs\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];\n    F[Concentration Response] --&gt;|Key Event Relationship| G[Key Event 1];\n    G[Key Event 1] --&gt;|Key Event Relationship| H[Key Event 2];\n    H[Key Event 2] --&gt;|Key Event Relationship| I[Adverse Outcome];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#multiple-assays-informing-an-aop",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#multiple-assays-informing-an-aop",
    "title": "GeoTox and RGCA",
    "section": "Multiple Assays Informing an AOP",
    "text": "Multiple Assays Informing an AOP\n\n\n\n\n\ngraph TB;\n    A[External Sources] --&gt; |Geospatial Modeling| B[External Exposure];\n    B[External Exposure] --&gt; |Behaviorial and Physiological Modeling| C[Internal Exposure];\n    C[Internal Exposure] --&gt; |PBTK| D[Target Organ Dose];\n    D[Target Organ Dose] --&gt; |IVIVE| E[In vitro Equivalent Concentration];\n    E[In vitro Equivalent Concentration] --&gt; |Mixtures Modeling| F[Concentration Response];\n    F[Concentration Response] --&gt;|Key Event Relationship| G[Key Event 1A];\n    F[Concentration Response] --&gt;|Key Event Relationship| H[Key Event 1B];\n    F[Concentration Response] --&gt;|Key Event Relationship| I[Key Event 1C];\n    G[Key Event 1A] --&gt;|Key Event Relationship| J[Key Event 2];\n    H[Key Event 1B] --&gt;|Key Event Relationship| J[Key Event 2];\n    I[Key Event 1C] --&gt;|Key Event Relationship| J[Key Event 2];\n    J[Key Event 2] --&gt;|Key Event Relationship| K[Adverse Outcome];"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#set-summary",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#set-summary",
    "title": "GeoTox and RGCA",
    "section": "{SET} Summary",
    "text": "{SET} Summary\n\nGeoTox and RGCA code are currently experimental\nPublishing versions 1.0.0. to SET Github and CRAN ASAP\nMany other documented, test-driven, and extensible packages from the SET group on air pollution exposures across the US, download/process GIS environmental data, and scalable GIS operations\nFollow Spatiotemporal-Exposures-and-Toxicology on GitHub\nWe are fostering a community around best-practices for software in geospatial exposure assessment, risk assessment, and computational toxicology\nemail: kyle.messier@nih.gov"
  },
  {
    "objectID": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#acknowledgements",
    "href": "presentations/20240214_SOT_ISES_Webinar/KPM_SOT_ISES_Webinar_20240214.html#acknowledgements",
    "title": "GeoTox and RGCA",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\n\nSET group in October 2023: Eva Marques, Daniel Zilber, Ranadeep Daw, Mariana Alifa Kassien, Insang Song\n\n\n\n\nMitchell Manware\nSkylar Marvel\nKristin Eccles\nAgnes Karamus\nNicole Kleinstreuer\nFred Parham\nCynthia Rider\nMelissa Lowe\nTaylor Potter\n\n\n\nJohn Wambaugh\nMike DeVito\nAndy Shapiro\nJulia Rager\nAlison Motsinger-Reif\nDavid Reif\nAubrey Miller\nCharles Schmitt\nTrisha Castranio\nAnn Liu\nRichard Kwok"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "SET group syllabus",
    "section": "",
    "text": "Welcome to the Spatiotemporal Exposures and Toxicology group (a.k.a. SET group). As an investigator, it is my job to ensure you have the resources and support you need to succeed in your research. This syllabus is a living document that outlines the expectations and resources available to you as a member of the group. Please make suggestions for improvements and additions to this document through GitHub pull requests.\nSincerely,\nKyle P Messier, PhD"
  },
  {
    "objectID": "syllabus.html#welcome-to-the-spatiotemporal-exposures-and-toxicology-group",
    "href": "syllabus.html#welcome-to-the-spatiotemporal-exposures-and-toxicology-group",
    "title": "SET group syllabus",
    "section": "",
    "text": "Welcome to the Spatiotemporal Exposures and Toxicology group (a.k.a. SET group). As an investigator, it is my job to ensure you have the resources and support you need to succeed in your research. This syllabus is a living document that outlines the expectations and resources available to you as a member of the group. Please make suggestions for improvements and additions to this document through GitHub pull requests.\nSincerely,\nKyle P Messier, PhD"
  },
  {
    "objectID": "syllabus.html#projects",
    "href": "syllabus.html#projects",
    "title": "SET group syllabus",
    "section": "Projects",
    "text": "Projects\n\nFellows in the group are expected to have a primary project with the goal of a first author publication\nFellows are encouraged to collaborate on secondary projects with each other\nThe group has an on-going group project that everyone is expected to contribute to\n\n\nProjects should be within the SET group’s research themes of (1) geospatial analysis, (2) mixtures and exposomic predictions, and (3) source-to-outcome-continuum or GeoTox modeling. However, I encourage everyone to provide their own unique perspective and expertise to these projects. Ultimately, a project will be successful if it is of great interest to you and you are passionate about it.\n\n\nProject Management\nWe utilize GitHub Projects to manage our projects. Currently,Each project has a project board with the following columns:\n\nNew Issues: General ideas and tasks that need to be fleshed out\nBacklog: Fleshed out ideas and tasks that need to be done. Priority is set by tasks at the top of the backlog.\nIn Progress: Tasks that are currently being worked on. A best-practice is to minimize the number of tasks in this column.\nReview: Tasks that are ready for review by a collaborator\nDone: Completed tasks\n\nGitHub Project tasks can be directly linked to issues on the corresponding GitHub repository. This allows for a seamless integration of project management and issue tracking."
  },
  {
    "objectID": "syllabus.html#software-installations",
    "href": "syllabus.html#software-installations",
    "title": "SET group syllabus",
    "section": "Software Installations",
    "text": "Software Installations\n\nR, Rstudio\nPython, VS Code\nGit\nQuarto\nQGIS\nAdobe Illustrator (optional)\nmySQL (optional)\nPostgresSQL (optional)"
  },
  {
    "objectID": "syllabus.html#eidp-individual-development-plans",
    "href": "syllabus.html#eidp-individual-development-plans",
    "title": "SET group syllabus",
    "section": "eIDP (Individual Development Plans)",
    "text": "eIDP (Individual Development Plans)\nIn the first few weeks to months as a fellow, we will develop an eIDP. This will be a living document that outlines your career goals and the steps you will take to achieve them. We will review this document quarterly and update it as needed."
  },
  {
    "objectID": "syllabus.html#software-best-practices",
    "href": "syllabus.html#software-best-practices",
    "title": "SET group syllabus",
    "section": "Software Best Practices",
    "text": "Software Best Practices\nWe are focused on developing and promoting software and computational best-practices such as test-driven-development (TDD) and open-source code for the environmental health sciences. To this end, we have protocols in place to ensure that our code is well-documented, tested, and reproducible. Below are some of the key practices we follow:\n\nUnit and Integration Testing\nWe will utilize various testing approaches to ensure functionality and quality of code.\n\n\nGit + GitHub\nVersion control of software is essential for reproducibility and collaboration. We use Git and the NIEHS Enterprise GitHub for version control and collaboration.\n\nCI/CD Workflows\nWithin GitHub, we will utilize continuous integration and continuous deployment workflows to ensure that our code is always functional and up-to-date. Multiple ** branch protection rules** within GitHub aresetup and enforced for our GitHub repositories:\n\nRequire pull request and 1 review before merging to main\nTest pass: Linting: Code shall adhere to the style/linting rules defined in the repository.\nTest pass: Tets Coverage: A given push should not decrease overall test coverage of the repository.\nTest pass: Build Checks: The code should build without errors or warnings.\n\nThe CI/CD workflows in GitHub are setup to run on every push to the main branch and on every pull request. The workflows are setup using yaml files in the .github/workflows directory of the repository.\n\n\n\nProcesses to test or check\n\ndata type\ndata name\ndata size\nrelative paths\noutput of one module is the expectation of the input of the next module\n\n\n\nTest Drive Development\nStarting from the end product, we work backwards while articulating the tests needed at each stage.\n\nKey Points of Unit and Integration Testing\n\nFile Type\n\nNetCDF\nNumeric, double precision\nNA\nVariable Names Exist\nNaming Convention\n\n\n\nStats\n\nNon-negative variance (\\(\\sigma^2\\))\nMean is reasonable (\\(\\mu\\))\nSI Units\n\n\n\nDomain\n\nIn the geographic domain (eg. US + buffer)\nIn Time range (e.g. 2018-2022)\n\n\n\nGeographic\n\nProjections\nCoordinate names (e.g. lat/lon)\nTime in acceptable format\n\n\n\n\n\nTest Driven Development (TDD)- Key Steps\n\nWrite a Test: Before you start writing any code, you write a test case for the functionality you want to implement. This test should fail initially because you haven’t written the code to make it pass yet. The test defines the expected behavior of your code.\nRun the Test: Run the test to ensure it fails. This step confirms that your test is correctly assessing the functionality you want to implement.\nWrite the Minimum Code: Write the minimum amount of code required to make the test pass. Don’t worry about writing perfect or complete code at this stage; the goal is just to make the test pass.\nRun the Test Again: After writing the code, run the test again. If it passes, it means your code now meets the specified requirements.\nRefactor (if necessary): If your code is working and the test passes, you can refactor your code to improve its quality, readability, or performance. The key here is that you should have test coverage to ensure you don’t introduce new bugs while refactoring.\nRepeat: Continue this cycle of writing a test, making it fail, writing the code to make it pass, and refactoring as needed. Each cycle should be very short and focused on a small piece of functionality.\nComplete the Feature: Keep repeating the process until your code meets all the requirements for the feature you’re working on.\n\nTDD helps ensure that your code is reliable and that it remains functional as you make changes and updates. It also encourages a clear understanding of the requirements and promotes better code design.\n\n\n_targets and/or snakemake pipelines\nWe will utilize the targets and/or snakemake packages in R and Python respectively to create reproducible workflows for our data analysis. These packages allow us to define the dependencies between the steps in our analysis and ensure that our analysis is reproducible. Additionally, they keep track of pipeline objects and skip steps that have already been run, saving time and resources.\n\nSome Benefits of _targets and/or snakemake pipelines\n\nReproducibility: By defining the dependencies between the steps in our analysis, we ensure that our analysis is reproducible. This is essential for scientific research and data analysis.\nHigh-Level Abstract: _targets and snakemake allow us to define our analysis at a high level of abstraction, making it easier to understand and maintain.\nTesting: Creating pipelines and unit/integration testing go hand-in-hand together. As we write the pipeline, the tests to write become obvious."
  },
  {
    "objectID": "syllabus.html#lab-meetings",
    "href": "syllabus.html#lab-meetings",
    "title": "SET group syllabus",
    "section": "Lab Meetings",
    "text": "Lab Meetings"
  },
  {
    "objectID": "syllabus.html#attendance-and-participation",
    "href": "syllabus.html#attendance-and-participation",
    "title": "SET group syllabus",
    "section": "Attendance and Participation",
    "text": "Attendance and Participation\nAttendance and engagement in your own research and the research of others is critical to the success of the group. I expect you to attend all group meetings and participate in group activities. If you are unable to attend a meeting, please let me know in advance.\nIn general, we work in the office but we are flexible for teleworking days.\n\nTime Management\nI expect you to manage your time effectively and meet deadlines. If you are having trouble meeting a deadline, please let me know as soon as possible so we can work together to find a solution. There is no set number of hours per week that you are expected to work, but I expect you to be productive and engaged in your work."
  },
  {
    "objectID": "syllabus.html#time-off",
    "href": "syllabus.html#time-off",
    "title": "SET group syllabus",
    "section": "Time Off",
    "text": "Time Off\nWe follow the NIH guidelines for time off. However, in general, my philosophy is to take time off when you need it. I trust that you will get your work done and that you will communicate with me if you need time off. If you are getting work done, participating and engaging with group activities, and meeting deadlines, I am happy to be flexible with time off.\n\nPaid family leave\nNIH provides paid family leave for the birth or adoption of a child. This is a great benefit and I encourage you to take advantage of it if you need it."
  },
  {
    "objectID": "syllabus.html#required-traininings",
    "href": "syllabus.html#required-traininings",
    "title": "SET group syllabus",
    "section": "Required Traininings",
    "text": "Required Traininings\n\nNIH Ethics Training: All members of the group are required to complete the NIH Ethics Training. This training covers topics such as conflict of interest, research misconduct, and ethical conduct in research. The training must be completed annually.\nNIH Information Security : All members of the group are required to complete the NIH Information Security Training. This training covers topics such as data security, privacy, and information handling. The training must be completed annually."
  },
  {
    "objectID": "syllabus.html#resources",
    "href": "syllabus.html#resources",
    "title": "SET group syllabus",
    "section": "Resources",
    "text": "Resources\n\nNIH Office of Intramural Training and Education (OITE) https://www.training.nih.gov/\nTrainee and Fellow Policies. Includes health insurance, family leave, outside activities, etc. https://www.training.nih.gov/policies/trainee-fellow-policies/\nNIH Library https://www.nihlibrary.nih.gov/\nNIH Data Science Interest Group https://datascience.nih.gov/\nNIH Data Science Training https://datascience.nih.gov/data-science-training\nBecoming a Resilient Scientist https://www.training.nih.gov/becoming_a_resilient_scientist\nNIH Library Training https://www.nihlibrary.nih.gov/training"
  },
  {
    "objectID": "syllabus.html#general-on-boarding-steps",
    "href": "syllabus.html#general-on-boarding-steps",
    "title": "SET group syllabus",
    "section": "General On-Boarding Steps",
    "text": "General On-Boarding Steps\n\nGet NIH Badge (Background Check, Fingerprints, VISA if applicable)\nGet NIH Email\nGet NIH Computer\nSetup HPC account with NIEHS OSC\nSetup GitHub account with NIEHS Organization\nDevelop Individual Development Plan (eIDP)"
  },
  {
    "objectID": "syllabus.html#writing-and-presentations",
    "href": "syllabus.html#writing-and-presentations",
    "title": "SET group syllabus",
    "section": "Writing and Presentations",
    "text": "Writing and Presentations\n\nOverleaf. I have a template for manuscripts and presentations. This is a good option for writing when there are a decent amount of equations.\nQuarto. I have a template for manuscripts and presentations. Quarto RevealJS and Beamer make pretty presentations that can be easily converted to HTML or PDF and shareable on our websites.\n\nWe will use these tools to write manuscripts and presentations."
  },
  {
    "objectID": "syllabus.html#group-meetings",
    "href": "syllabus.html#group-meetings",
    "title": "SET group syllabus",
    "section": "Group Meetings",
    "text": "Group Meetings\nWe have 2 group meetings per week\nMondays from 10-11am & Thursdays from 2:30-3:30pm\nGiven, the relative frequency of the meetings, we do often only go 30 minutes, depending on the amount of material to cover.\nThe general format of the meetings is as follows:\n\nCheck-in: Each member of the group will give a brief update on their progress and any issues they are facing\nRubber Ducking: We’ll spend 10 - 20 minutes looking at someone’s code, so that everyone can help and also learn new techniques, tricks, packages, etc. This could include code in progress, code that is not working, efficiency improvements, or unit/integreation testing review.\nLogistics: We’ll discuss any upcoming deadlines, meetings, etc."
  },
  {
    "objectID": "presentations.html#presentations",
    "href": "presentations.html#presentations",
    "title": "Presentations",
    "section": "",
    "text": "National Institute on Minority Health and Health Disparities, Division of Intramural Research Seminar Series, 2024-01-09\nPresentation 2"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#about-us-setgroup",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#about-us-setgroup",
    "title": "Exposure on Time:",
    "section": "About Us: {SET}group",
    "text": "About Us: {SET}group\n\n\nSpatiotemporal Exposure Mapping\nChemical and Stressor Mixtures Prediction\nMechanistically Informed Risk Assessment"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#about-us-setgroup-1",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#about-us-setgroup-1",
    "title": "Exposure on Time:",
    "section": "About Us: {SET}group",
    "text": "About Us: {SET}group\n\n\n\n\n\nEva Marques\nDaniel Zilber\nRanadeep Daw\nMariana Alifa\nInsang Song\nKyle Messier\nMitchell Manware"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-1",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-1",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-2",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-2",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n Kyle\n CEHD Attendees\n Cavin"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-3",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-3",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n\n Much discussion: “integration … models … privacy”"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-4",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-4",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n There are so many PM2.5 models, why do we need another one?"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-5",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-5",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n\n\n Actually…"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-6",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-6",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n\n\n I’ve had a difficult time finding air pollution models that are available during the same time range as our EHR data"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-7",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-7",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n Interesting … I’ll look into developing a PM2.5 model for recent years"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-8",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-8",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n A couple months later …"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-9",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-9",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n I have new group of postdocs and data analysts joining and am worried about how to keep track of their code and knowledge retention"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-10",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-10",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n I have new group of postdocs and data analysts joining and am worried about how to keep track of their code and knowledge retention"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-11",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-11",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n 30 hours of NIH sponsored project management\n\n\n\nProject and Portfolio management approaches\nTask management through tools like Kanban boards\nAgile project management"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-12",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-12",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n\n\nAgile \\(||\\) CI/CD"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-13",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-13",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\n\n SET group!"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-14",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-14",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\nWe discuss the idea of a group project focused the development of an air pollution model with regular updates using TDD and CI/CD principles\n\n Sounds good to us!"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-15",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#back-story-15",
    "title": "Exposure on Time:",
    "section": "Back Story",
    "text": "Back Story\nGroup project using TDD and CI/CD principles\n\n\n Awesome!"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#software-and-computational-best-practices",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#software-and-computational-best-practices",
    "title": "Exposure on Time:",
    "section": "Software and Computational Best Practices",
    "text": "Software and Computational Best Practices\n\nTest Driven Development\nContinuous Integration\nBuild Checks\nStyle/Linting\nWorkflows/Pipelines"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#some-geospatial-models-from-me",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#some-geospatial-models-from-me",
    "title": "Exposure on Time:",
    "section": "Some Geospatial Models From Me",
    "text": "Some Geospatial Models From Me\nThat are not FAIR+\n\n\nArsenic in North Carolina\nTetrachloroethylene in North Carolina\nNitrate in North Carolina\nRadon in North Carolina\nNitrogen Dioxide in the US\nMobile monitoring NO, PM, and BC in the Bay Area\n\n\nKind of FAIR+\nRaw data is available for research\nModeled data is not readily usable for epidemiology"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\nPerhaps not perfect, but better than most\n\nACAG"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-1",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-1",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\nPerhaps not perfect, but better than most\n\nNASA"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-2",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-2",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\nPerhaps not perfect, but better than most\n\nNASA"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-3",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-3",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\nPerhaps not perfect, but better than most\n\nMicrosoft Planetary Computer"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-4",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-4",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\nPerhaps not perfect, but better than most\n\nOpenAQ"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-5",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#others-making-exposure-data-accessible-5",
    "title": "Exposure on Time:",
    "section": "Others making exposure data accessible",
    "text": "Others making exposure data accessible\n\n\nFor the most part, these are data catalogs\nSpatial and temporal domains can be limited\nStill require a heavy lift on the health researcher to integrate"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#set-group-group-project-intro",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#set-group-group-project-intro",
    "title": "Exposure on Time:",
    "section": "SET Group Group Project Intro",
    "text": "SET Group Group Project Intro\n\n\nGoal: Develop an air pollution model for the last 5 years that is updated bi-annually\nEntire SET group, Cavin Ward-Caviness, Lara Clark, Anisha Singh\nTest-Driven Development\nGitHub with strict rules\nTargets make-like pipeline\nFine spatial and temporal resolution\nPost-processing for aggregated spatial and temporal resolutions"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-and-test-coverage",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-and-test-coverage",
    "title": "Exposure on Time:",
    "section": "TDD and Test Coverage",
    "text": "TDD and Test Coverage\n\nUnit tests: Test a function or very specific piece of code e.g.\nDoes my function return an error when the input is wrong?\nDoes function return the expected value given a set of inputs?\nexpect_*\nIntegration tests: Tests the input from function X works with function Y\nSee testthat R package"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-philosophy",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-philosophy",
    "title": "Exposure on Time:",
    "section": "TDD Philosophy",
    "text": "TDD Philosophy\n\n\nWrite a test\nRun the test -&gt; Expect it to fail\nWrite the minimum code\nRun the test -&gt; Till it passes\nRefactor -&gt; Repeat -&gt; Complete"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-philosophy-1",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#tdd-philosophy-1",
    "title": "Exposure on Time:",
    "section": "TDD Philosophy",
    "text": "TDD Philosophy\n\nForces you to think about code requirements\nForces explicit testing of code\nMinimizes bugs"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#cicd",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#cicd",
    "title": "Exposure on Time:",
    "section": "CI/CD",
    "text": "CI/CD\n\n\nFrequent code commits\nDetect Errors Sooner\nReduces Complexity of Debugging\nRun Code Tests Automatically\nMake Working in Groups Easier"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#stylelinting",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#stylelinting",
    "title": "Exposure on Time:",
    "section": "Style/Linting",
    "text": "Style/Linting\n\nConsistent style –&gt; rEdabIliTY and_maintainability\nIdentifying syn.tax errors;\nSemantic Errors"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#pipelines-and-workflows",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#pipelines-and-workflows",
    "title": "Exposure on Time:",
    "section": "Pipelines and Workflows",
    "text": "Pipelines and Workflows\n\nA pipeline is a computational workflow that does statistics, analytics, or data science\nCoordinate analysis with a DAG like structure\nSkip steps that are not needed with updates\nFacilitates code and package integration"
  },
  {
    "objectID": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#lets-hop-over-to-the-github-repository",
    "href": "presentations/20240223_CEHD_Workshop/20240223_CEHD_Workshop.html#lets-hop-over-to-the-github-repository",
    "title": "Exposure on Time:",
    "section": "Let’s hop over to the GitHub repository",
    "text": "Let’s hop over to the GitHub repository"
  },
  {
    "objectID": "publications/Zilber_Messier_2024.html",
    "href": "publications/Zilber_Messier_2024.html",
    "title": "Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction",
    "section": "",
    "text": "Zilber, D., & Messier, K. (2024). Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction. Plos one, 19(3), e0298687."
  },
  {
    "objectID": "publications/Zilber_Messier_2024.html#citation-apa-7",
    "href": "publications/Zilber_Messier_2024.html#citation-apa-7",
    "title": "Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction",
    "section": "",
    "text": "Zilber, D., & Messier, K. (2024). Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction. Plos one, 19(3), e0298687."
  },
  {
    "objectID": "publications/Zilber_Messier_2024.html#abstract",
    "href": "publications/Zilber_Messier_2024.html#abstract",
    "title": "Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction",
    "section": "Abstract",
    "text": "Abstract\nEnvironmental toxicants overwhelmingly occur together as mixtures. The variety of possible chemical interactions makes it difficult to predict the danger of the mixture. In this work, we propose the novel Reflected Generalized Concentration Addition (RGCA), a piece-wise, geometric technique for sigmoidal dose-responsed inverse functions that extends the use of generalized concentration addition (GCA) for 3+ parameter models. Since experimental tests of all relevant mixtures is costly and intractable, we rely only on the individual chemical dose responses. Additionally, RGCA enhances the classical two-step model for the cumulative effects of mixtures, which assumes a combination of GCA and independent action (IA). We explore how various clustering methods can dramatically improve predictions. We compare our technique to the IA, CA, and GCA models and show in a simulation study that the two-step approach performs well under a variety of true models. We then apply our method to a challenging data set of individual chemical and mixture responses where the target is an androgen receptor (Tox21 AR-luc). Our results show significantly improved predictions for larger mixtures. Our work complements ongoing efforts to predict environmental exposure to various chemicals and offers a starting point for combining different exposure predictions to quantify a total risk to health."
  },
  {
    "objectID": "Publications.html",
    "href": "Publications.html",
    "title": "{SET}grp",
    "section": "",
    "text": "Home\n    Publications\n  \n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n         \n          Publication\n        \n         \n          Year\n        \n     \n  \n    \n      \n      \n    \n\n\n\n  \n    Associations between Flood Risk and United States Census Tract-Level Health Outcomes\n    Alvin Sheng, Brian J Reich, & Kyle P Messier\n    American Journal of Epidemiology (In Press)\n    (2024)\n    \n      Details\n    \n    \n    \n    \n    \n  \n\n  \n    Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction\n    Daniel Zilber & Kyle P Messier\n    PLOS One\n    (2024)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n  \n\n  \n    A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target.\n    Kristin M. Eccles, Agnes L. Karmaus, Nicole C. Kleinstreuer, Fred Parham, Cynthia V. Rider, John F. Wambaugh, Kyle P. Messier\n    Science of the Total Environment\n    (2023)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n  \n    Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities\n    Yuxia Cui, Kristin M Eccles, Richard K Kwok, Bonnie R Joubert, Kyle P Messier, David M Balshaw\n    Toxics\n    (2023)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n  \n    The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS)\n    Melissa E Lowe, Farida S Akhtari, Taylor A Potter, David C Fargo, Charles P Schmitt, Shepherd H Schurman, Kristin M Eccles, Alison Motsinger-Reif, Janet E Hall, Kyle P Messier\n    Journal of Exposure Science & Environmental Epidemiology\n    (2023)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n  \n    Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O'ahu, Hawai'i.\n    Ettie M Lipner, Joshua P French, Stephend Nelson, Joseph O Falkinham III, Rachel A Mercaldo, Rebekah A Blakney, Yihe G Daida, Timothy B Frankland, Kyle P Messier, Jennifer R Honda, Stacey Honda, D. Rebecca Prevots\n    Environmental Epidemiology\n    (2023)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n  \n    Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists\n    Johanna R Jahnke, Kyle P Messier, Melissa Lowe, Anne Marie Jukic\n    Current Epidemiology Reports\n    (2022)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n  \n    Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide\n    Kyle P Messier & Matthias Katzfuss\n    Annals of Applied Statistics\n    (2021)\n    \n      Details\n    \n    \n    \n      DOI\n    \n    \n    \n    \n    \n    \n       PMC\n    \n    \n  \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publications/Zilber_Messier_2024.html#citation",
    "href": "publications/Zilber_Messier_2024.html#citation",
    "title": "Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction",
    "section": "",
    "text": "Zilber, D., & Messier, K. (2024). Reflected generalized concentration addition and Bayesian hierarchical models to improve chemical mixture prediction. Plos one, 19(3), e0298687."
  },
  {
    "objectID": "publications/Sheng_etal_2024.html",
    "href": "publications/Sheng_etal_2024.html",
    "title": "Associations between Flood Risk and United States Census Tract-Level Health Outcomes",
    "section": "",
    "text": "Human-induced climate change has led to more frequent and severe flooding throughout the globe. We examined the association between flood risk and the prevalence of coronary heart disease, high blood pressure, asthma, and poor mental health in the United States, while taking into account different levels of social vulnerability. We aggregated flood risk variables from First Street Foundation by census tract and used principal component analysis to derive a set of five interpretable flood risk factors. The dependent variables were census-tract level disease prevalences generated by the Centers for Disease Control and Prevention. Bayesian spatial conditional autoregressive models were fit on this data to quantify the relationship between flood risk and health outcomes under different stratifications of social vulnerability. We showed that three flood risk principal components had small but significant associations with each of the health outcomes, across the different stratifications of social vulnerability. Our analysis gives the first United States-wide estimates of the associated effects of flood risk on specific health outcomes. We also show that social vulnerability is an important moderator of the relationship between flood risk and health outcomes. Our approach can be extended to other ecological studies that examine the health impacts of climate hazards."
  },
  {
    "objectID": "publications/Sheng_etal_2024.html#abstract",
    "href": "publications/Sheng_etal_2024.html#abstract",
    "title": "Associations between Flood Risk and United States Census Tract-Level Health Outcomes",
    "section": "",
    "text": "Human-induced climate change has led to more frequent and severe flooding throughout the globe. We examined the association between flood risk and the prevalence of coronary heart disease, high blood pressure, asthma, and poor mental health in the United States, while taking into account different levels of social vulnerability. We aggregated flood risk variables from First Street Foundation by census tract and used principal component analysis to derive a set of five interpretable flood risk factors. The dependent variables were census-tract level disease prevalences generated by the Centers for Disease Control and Prevention. Bayesian spatial conditional autoregressive models were fit on this data to quantify the relationship between flood risk and health outcomes under different stratifications of social vulnerability. We showed that three flood risk principal components had small but significant associations with each of the health outcomes, across the different stratifications of social vulnerability. Our analysis gives the first United States-wide estimates of the associated effects of flood risk on specific health outcomes. We also show that social vulnerability is an important moderator of the relationship between flood risk and health outcomes. Our approach can be extended to other ecological studies that examine the health impacts of climate hazards."
  },
  {
    "objectID": "publications/Lowe_etal_2023.html",
    "href": "publications/Lowe_etal_2023.html",
    "title": "The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS)",
    "section": "",
    "text": "Lowe ME, Akhtari FS, Potter TA, Fargo DC, Schmitt CP, Schurman SH, Eccles KM, Motsinger-Reif A, Hall JE, Messier KP. The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS). J Expo Sci Environ Epidemiol. 2023 May;33(3):474-481. doi: 10.1038/s41370-022-00502-0. Epub 2022 Dec 2. PMID: 36460922; PMCID: PMC10234803."
  },
  {
    "objectID": "publications/Lowe_etal_2023.html#citation",
    "href": "publications/Lowe_etal_2023.html#citation",
    "title": "The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS)",
    "section": "",
    "text": "Lowe ME, Akhtari FS, Potter TA, Fargo DC, Schmitt CP, Schurman SH, Eccles KM, Motsinger-Reif A, Hall JE, Messier KP. The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS). J Expo Sci Environ Epidemiol. 2023 May;33(3):474-481. doi: 10.1038/s41370-022-00502-0. Epub 2022 Dec 2. PMID: 36460922; PMCID: PMC10234803."
  },
  {
    "objectID": "publications/Lowe_etal_2023.html#abstract",
    "href": "publications/Lowe_etal_2023.html#abstract",
    "title": "The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS)",
    "section": "Abstract",
    "text": "Abstract\n\nBackground\nAutoimmune (AI) diseases appear to be a product of genetic predisposition and environmental triggers. Disruption of the skin barrier causes exacerbation of psoriasis/eczema. Oxidative stress is a mechanistic pathway for pathogenesis of the disease and is also a primary mechanism for the detrimental effects of air pollution.\n\n\nMethods\nWe evaluated the association between autoimmune skin diseases (psoriasis or eczema) and air pollutant mixtures in 9060 subjects from the Personalized Environment and Genes Study (PEGS) cohort. Pollutant exposure data on six criteria air pollutants are publicly available from the Center for Air, Climate, and Energy Solutions and the Atmospheric Composition Analysis Group. For increased spatial resolution, we included spatially cumulative exposure to volatile organic compounds from sites in the United States Environmental Protection Agency Toxic Release Inventory and the density of major roads within a 5 km radius of a participant’s address from the United States Geological Survey. We applied logistic regression with quantile g-computation, adjusting for age, sex, diagnosis with an autoimmune disease in family or self, and smoking history to evaluate the relationship between self-reported diagnosis of an AI skin condition and air pollution mixtures.\n\n\nResults\nOnly one air pollution variable, sulfate, was significant individually (OR = 1.06, p = 3.99E−2); however, the conditional odds ratio for the combined mixture components of PM2.5 (black carbon, sulfate, sea salt, and soil), CO, SO2, benzene, toluene, and ethylbenzene is 1.10 (p-value = 5.4E−3).\n\n\nSignificance\nWhile the etiology of autoimmune skin disorders is not clear, this study provides evidence that air pollutants are associated with an increased prevalence of these disorders. The results provide further evidence of potential health impacts of air pollution exposures on life-altering diseases."
  },
  {
    "objectID": "publications/Lowe_etal_2023.html#significance-and-impact-statement",
    "href": "publications/Lowe_etal_2023.html#significance-and-impact-statement",
    "title": "The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS)",
    "section": "Significance and impact statement",
    "text": "Significance and impact statement\nThe impact of air pollution on non-pulmonary and cardiovascular diseases is understudied and under-reported. We find that air pollution significantly increased the odds of psoriasis or eczema in our cohort and the magnitude is comparable to the risk associated with smoking exposure. Autoimmune diseases like psoriasis and eczema are likely impacted by air pollution, particularly complex mixtures and our study underscores the importance of quantifying air pollution-associated risks in autoimmune disease."
  },
  {
    "objectID": "index.html#the-spatiotemporal-exposures-and-toxicology-group-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "href": "index.html#the-spatiotemporal-exposures-and-toxicology-group-set-group-has-a-broad-interest-in-geospatial-exposomics-and-risk-mapping.-key-areas-of-research-include",
    "title": "{SET} group",
    "section": "",
    "text": "Spatiotemporal Exposures and Toxicology group -&gt; {SET} group\n\n\n\n\n\nThis is the professional website for the SET group, maintained by Kyle P Messier. For Kyle and the SET group’s official NIH/NIEHS government website please visit here."
  },
  {
    "objectID": "software.html#software-development-practices",
    "href": "software.html#software-development-practices",
    "title": "{SET}grp",
    "section": "Software Development Practices",
    "text": "Software Development Practices\nWe are focused on developing and promoting software and computational best-practices such as test-driven-development (TDD) and open-source code for the environmental health sciences. To this end, we have protocols in place to ensure that our code is well-documented, tested, and reproducible. Below are some of the key practices we follow:\n\nUnit and Integration Testing\nWe will utilize various testing approaches to ensure functionality and quality of code.\n\n\nGit + GitHub\nVersion control of software is essential for reproducibility and collaboration. We use Git and the NIEHS Enterprise GitHub for version control and collaboration.\n\nCI/CD Workflows\nWithin GitHub, we will utilize continuous integration and continuous deployment workflows to ensure that our code is always functional and up-to-date. Multiple ** branch protection rules** within GitHub aresetup and enforced for our GitHub repositories:\n\nRequire pull request and 1 review before merging to main\nTest pass: Linting: Code shall adhere to the style/linting rules defined in the repository.\nTest pass: Tets Coverage: A given push should not decrease overall test coverage of the repository.\nTest pass: Build Checks: The code should build without errors or warnings.\n\nThe CI/CD workflows in GitHub are setup to run on every push to the main branch and on every pull request. The workflows are setup using yaml files in the .github/workflows directory of the repository.\n\n\n\nProcesses to test or check\n\ndata type\ndata name\ndata size\nrelative paths\noutput of one module is the expectation of the input of the next module\n\n\n\nTest Drive Development\nStarting from the end product, we work backwards while articulating the tests needed at each stage.\n\nKey Points of Unit and Integration Testing\n\nFile Type\n\nNetCDF\nNumeric, double precision\nNA\nVariable Names Exist\nNaming Convention\n\n\n\nStats\n\nNon-negative variance (\\(\\sigma^2\\))\nMean is reasonable (\\(\\mu\\))\nSI Units\n\n\n\nDomain\n\nIn the geographic domain (eg. US + buffer)\nIn Time range (e.g. 2018-2022)\n\n\n\nGeographic\n\nProjections\nCoordinate names (e.g. lat/lon)\nTime in acceptable format\n\n\n\n\n\nTest Driven Development (TDD)- Key Steps\n\nWrite a Test: Before you start writing any code, you write a test case for the functionality you want to implement. This test should fail initially because you haven’t written the code to make it pass yet. The test defines the expected behavior of your code.\nRun the Test: Run the test to ensure it fails. This step confirms that your test is correctly assessing the functionality you want to implement.\nWrite the Minimum Code: Write the minimum amount of code required to make the test pass. Don’t worry about writing perfect or complete code at this stage; the goal is just to make the test pass.\nRun the Test Again: After writing the code, run the test again. If it passes, it means your code now meets the specified requirements.\nRefactor (if necessary): If your code is working and the test passes, you can refactor your code to improve its quality, readability, or performance. The key here is that you should have test coverage to ensure you don’t introduce new bugs while refactoring.\nRepeat: Continue this cycle of writing a test, making it fail, writing the code to make it pass, and refactoring as needed. Each cycle should be very short and focused on a small piece of functionality.\nComplete the Feature: Keep repeating the process until your code meets all the requirements for the feature you’re working on.\n\nTDD helps ensure that your code is reliable and that it remains functional as you make changes and updates. It also encourages a clear understanding of the requirements and promotes better code design.\n\n\n_targets and/or snakemake pipelines\nWe will utilize the targets and/or snakemake packages in R and Python respectively to create reproducible workflows for our data analysis. These packages allow us to define the dependencies between the steps in our analysis and ensure that our analysis is reproducible. Additionally, they keep track of pipeline objects and skip steps that have already been run, saving time and resources.\n\nSome Benefits of _targets and/or snakemake pipelines\n\nReproducibility: By defining the dependencies between the steps in our analysis, we ensure that our analysis is reproducible. This is essential for scientific research and data analysis.\nHigh-Level Abstract: _targets and snakemake allow us to define our analysis at a high level of abstraction, making it easier to understand and maintain.\nTesting: Creating pipelines and unit/integration testing go hand-in-hand together. As we write the pipeline, the tests to write become obvious."
  },
  {
    "objectID": "software.html#software-list",
    "href": "software.html#software-list",
    "title": "Software",
    "section": "",
    "text": "The following is a list of software and tools that we have developed or contributed to.\n\n\n\nNo.\nPackage\nDescription\nStatus\n\n\n\n\n1.\namadeus\nA Machine for Data, Environments, and User Setup for common environmental and climate health datasets is an R package developed to improve and expedite users’ access to large, publicly available geospatial datasets.\n\n\n\n2.\nbeethoven\nBuilding an Extensible, Reproducible, Test-driven, Harmonized, Open-source, Versioned, Ensemble model for air quality is an R package developed to facilitate the development of ensemble models for air quality.\n\n\n\n3.\nchopin\nComputation for Climate and Health research On Parallelized Infrastructure automates parallelization in spatial operations with chopin functions as well as sf/terra functions.\n\n\n\n4.\nGeoTox\nGeoTox, or source-to-outcome, modeling framework with an S3 object-oriented approach. Facilitates the calculation and visualization of single and multiple chemical risk at individual and group levels.\n\n\n\n5.\nRGCA\nImplements Reflected Generalized Concentration Addition: A geometric, piecewise inverse function for 3+ parameter sigmoidal models used in chemical mixture concentration-response modeling.\n\n\n\n6.\nPrestoGP\nScalable penalized regression on spatio-temporal outcomes using Gaussian processes. Designed for big data, large-scale geospatial exposure assessment, and geophysical modeling."
  },
  {
    "objectID": "software.html#software",
    "href": "software.html#software",
    "title": "{SET}grp",
    "section": "",
    "text": "The following is a list of software and tools that we have developed or contributed to.\n\n\n\nNo.\nPackage Name\nDescription\nStatus\n\n\n\n\n1.\namadeus\nA Machine for Data, Environments, and User Setup for common environmental and climate health datasets is an R package developed to improve and expedite users’ access to large, publicly available geospatial datasets.\n\n\n\n2.\nbeethoven\nBuilding an Extensible, Reproducible, Test-driven, Harmonized, Open-source, Versioned, Ensemble model for air quality is an R package developed to facilitate the development of ensemble models for air quality.\n\n\n\n3.\nchopin\nComputation for Climate and Health research On Parallelized Infrastructure automates parallelization in spatial operations with chopin functions as well as sf/terra functions.\n\n\n\n4.\nGeoTox\nGeoTox, or source-to-outcome, modeling framework with an S3 object-oriented approach. Facilitates the calculation and visualization of single and multiple chemical risk at individual and group levels.\n\n\n\n5.\nRGCA\nImplements Reflected Generalized Concentration Addition: A geometric, piecewise inverse function for 3+ parameter sigmoidal models used in chemical mixture concentration-response modeling.\n\n\n\n6.\nPrestoGP\nScalable penalized regression on spatio-temporal outcomes using Gaussian processes. Designed for big data, large-scale geospatial exposure assessment, and geophysical modeling."
  },
  {
    "objectID": "publications/Eccles_etal_2023.html",
    "href": "publications/Eccles_etal_2023.html",
    "title": "A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target.",
    "section": "",
    "text": "Eccles KM, Karmaus AL, Kleinstreuer NC, Parham F, Rider CV, Wambaugh JF, Messier KP. A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target. Sci Total Environ. 2023 Jan 10;855:158905. doi: 10.1016/j.scitotenv.2022.158905. Epub 2022 Sep 21. PMID: 36152849; PMCID: PMC9979101."
  },
  {
    "objectID": "publications/Eccles_etal_2023.html#citation",
    "href": "publications/Eccles_etal_2023.html#citation",
    "title": "A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target.",
    "section": "",
    "text": "Eccles KM, Karmaus AL, Kleinstreuer NC, Parham F, Rider CV, Wambaugh JF, Messier KP. A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target. Sci Total Environ. 2023 Jan 10;855:158905. doi: 10.1016/j.scitotenv.2022.158905. Epub 2022 Sep 21. PMID: 36152849; PMCID: PMC9979101."
  },
  {
    "objectID": "publications/Eccles_etal_2023.html#abstract",
    "href": "publications/Eccles_etal_2023.html#abstract",
    "title": "A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target.",
    "section": "Abstract",
    "text": "Abstract\nIn the real world, individuals are exposed to chemicals from sources that vary over space and time. However, traditional risk assessments based on in vivo animal studies typically use a chemical-by-chemical approach and apical disease endpoints. New approach methodologies (NAMs) in toxicology, such as in vitro high-throughput (HTS) assays generated in Tox21 and ToxCast, can more readily provide mechanistic chemical hazard information for chemicals with no existing data than in vivo methods. In this paper, we establish a workflow to assess the joint action of 41 modeled ambient chemical exposures in the air from the USA-wide National Air Toxics Assessment by integrating human exposures with hazard data from curated HTS (cHTS) assays to identify counties where exposure to the local chemical mixture may perturb a common biological target. We exemplify this proof-of-concept using CYP1A1 mRNA up-regulation. We first estimate internal exposure and then convert the inhaled concentration to a steady state plasma concentration using physiologically based toxicokinetic modeling parameterized with county-specific information on ages and body weights. We then use the estimated blood plasma concentration and the concentration-response curve from the in vitro cHTS assay to determine the chemical-specific effects of the mixture components. Three mixture modeling methods were used to estimate the joint effect from exposure to the chemical mixture on the activity levels, which were geospatially mapped. Finally, a Monte Carlo uncertainty analysis was performed to quantify the influence of each parameter on the combined effects. This workflow demonstrates how NAMs can be used to predict early-stage biological perturbations that can lead to adverse health outcomes that result from exposure to chemical mixtures. As a result, this work will advance mixture risk assessment and other early events in the effects of chemicals."
  },
  {
    "objectID": "pubs-rss.html",
    "href": "pubs-rss.html",
    "title": "PubMed Article Replication",
    "section": "",
    "text": "# Fetch the webpage content\nurl &lt;- \"https://pubmed.ncbi.nlm.nih.gov/36460922/\"\npage &lt;- read_html(url)\n\n# Extract article title\ntitle &lt;- page %&gt;%\n  html_nodes(\".heading-title\") %&gt;%\n  html_text() %&gt;%\n  str_trim()\n\n# Extract article abstract\nabstract &lt;- page %&gt;%\n  html_nodes(\".abstract-content\") %&gt;%\n  html_text() %&gt;%\n  str_trim()\n\n# Extract article authors\nauthors &lt;- page %&gt;%\n  html_nodes(\".authors-list\") %&gt;%\n  html_text() %&gt;%\n  str_trim()\n\n# Extract article journal and publication date\njournal_date &lt;- page %&gt;%\n  html_nodes(\".journal-actions\") %&gt;%\n  html_text() %&gt;%\n  str_trim()\n\n# Print the extracted content\ncat(paste(\"### Title:\\n\\n\", title, \"\\n\\n\"))\n\n### Title:\n\n The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS) \n\n ### Title:\n\n The skin is no barrier to mixtures: Air pollutant mixtures and reported psoriasis or eczema in the Personalized Environment and Genes Study (PEGS) \n\ncat(paste(\"### Authors:\\n\\n\", authors, \"\\n\\n\"))\n\n### Authors:\n\n Melissa E Lowe \n                1\n               \n                2\n              , Farida S Akhtari \n                3\n              , Taylor A Potter \n                4\n              , David C Fargo \n                4\n              , Charles P Schmitt \n                5\n              , Shepherd H Schurman \n                6\n               \n                7\n              , Kristin M Eccles \n                4\n              , Alison Motsinger-Reif \n                3\n              , Janet E Hall \n                6\n              , Kyle P Messier \n                4\n               \n                6\n               \n                3\n               \n                8 \n\n ### Authors:\n\n Melissa E Lowe et al. \n\n ### Authors:\n\n Melissa E Lowe \n                1\n               \n                2\n              , Farida S Akhtari \n                3\n              , Taylor A Potter \n                4\n              , David C Fargo \n                4\n              , Charles P Schmitt \n                5\n              , Shepherd H Schurman \n                6\n               \n                7\n              , Kristin M Eccles \n                4\n              , Alison Motsinger-Reif \n                3\n              , Janet E Hall \n                6\n              , Kyle P Messier \n                4\n               \n                6\n               \n                3\n               \n                8 \n\ncat(paste(\"### Journal and Publication Date:\\n\\n\", journal_date, \"\\n\\n\"))\n\n### Journal and Publication Date:\n\n J Expo Sci Environ Epidemiol\n    Actions\n              Search in PubMed\n            \n              Search in NLM Catalog\n            \n              Add to Search \n\n ### Journal and Publication Date:\n\n J Expo Sci Environ Epidemiol\n    Actions\n              Search in PubMed\n            \n              Search in NLM Catalog\n            \n              Add to Search \n\ncat(paste(\"### Abstract:\\n\\n\", abstract, \"\\n\\n\"))\n\n### Abstract:\n\n Background:\n        \n      \n      Autoimmune (AI) diseases appear to be a product of genetic predisposition and environmental triggers. Disruption of the skin barrier causes exacerbation of psoriasis/eczema. Oxidative stress is a mechanistic pathway for pathogenesis of the disease and is also a primary mechanism for the detrimental effects of air pollution.\n    \n  \n\n  \n\n              \n                \n\n\n  \n    \n      \n        \n          Methods:\n        \n      \n      We evaluated the association between autoimmune skin diseases (psoriasis or eczema) and air pollutant mixtures in 9060 subjects from the Personalized Environment and Genes Study (PEGS) cohort. Pollutant exposure data on six criteria air pollutants are publicly available from the Center for Air, Climate, and Energy Solutions and the Atmospheric Composition Analysis Group. For increased spatial resolution, we included spatially cumulative exposure to volatile organic compounds from sites in the United States Environmental Protection Agency Toxic Release Inventory and the density of major roads within a 5 km radius of a participant's address from the United States Geological Survey. We applied logistic regression with quantile g-computation, adjusting for age, sex, diagnosis with an autoimmune disease in family or self, and smoking history to evaluate the relationship between self-reported diagnosis of an AI skin condition and air pollution mixtures.\n    \n  \n\n  \n\n              \n                \n\n\n  \n    \n      \n        \n          Results:\n        \n      \n      Only one air pollution variable, sulfate, was significant individually (OR = 1.06, p = 3.99E-2); however, the conditional odds ratio for the combined mixture components of PM2.5 (black carbon, sulfate, sea salt, and soil), CO, SO2, benzene, toluene, and ethylbenzene is 1.10 (p-value = 5.4E-3).\n    \n  \n\n  \n\n              \n                \n\n\n  \n    \n      \n        \n          Significance:\n        \n      \n      While the etiology of autoimmune skin disorders is not clear, this study provides evidence that air pollutants are associated with an increased prevalence of these disorders. The results provide further evidence of potential health impacts of air pollution exposures on life-altering diseases.\n    \n  \n\n  \n\n              \n                \n\n\n  \n    \n      \n        \n          Significance and impact statement:\n        \n      \n      The impact of air pollution on non-pulmonary and cardiovascular diseases is understudied and under-reported. We find that air pollution significantly increased the odds of psoriasis or eczema in our cohort and the magnitude is comparable to the risk associated with smoking exposure. Autoimmune diseases like psoriasis and eczema are likely impacted by air pollution, particularly complex mixtures and our study underscores the importance of quantifying air pollution-associated risks in autoimmune disease."
  },
  {
    "objectID": "publications/Eccles_etal_2023.html#free-full-text",
    "href": "publications/Eccles_etal_2023.html#free-full-text",
    "title": "A geospatial modeling approach to quantifying the risk of exposure to environmental chemical mixtures via a common molecular target.",
    "section": "Free Full Text",
    "text": "Free Full Text\nPubMed\nScience of the Total Environment"
  },
  {
    "objectID": "publications/Lipner_etal_2022.html",
    "href": "publications/Lipner_etal_2022.html",
    "title": "Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i.",
    "section": "",
    "text": "Lipner EM, French JP, Nelson S, Falkinham Iii JO, Mercaldo RA, Blakney RA, Daida YG, Frankland TB, Messier KP, Honda JR, Honda S, Prevots DR. Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i. Environ Epidemiol. 2022 Sep 2;6(5):e220. doi: 10.1097/EE9.0000000000000220. PMID: 36249270; PMCID: PMC9555944."
  },
  {
    "objectID": "publications/Lipner_etal_2022.html#citation",
    "href": "publications/Lipner_etal_2022.html#citation",
    "title": "Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i.",
    "section": "",
    "text": "Lipner EM, French JP, Nelson S, Falkinham Iii JO, Mercaldo RA, Blakney RA, Daida YG, Frankland TB, Messier KP, Honda JR, Honda S, Prevots DR. Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i. Environ Epidemiol. 2022 Sep 2;6(5):e220. doi: 10.1097/EE9.0000000000000220. PMID: 36249270; PMCID: PMC9555944."
  },
  {
    "objectID": "publications/Lipner_etal_2022.html#abstract",
    "href": "publications/Lipner_etal_2022.html#abstract",
    "title": "Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i.",
    "section": "Abstract",
    "text": "Abstract\nHawai’i has the highest prevalence of nontuberculous mycobacterial (NTM) pulmonary disease in the United States. Previous studies indicate that certain trace metals in surface water increase the risk of NTM infection. OBJECTIVE: To identify whether trace metals influence the risk of NTM infection in O’ahu, Hawai’i. METHODS: A population-based ecologic cohort study was conducted using NTM infection incidence data from patients enrolled at Kaiser Permanente Hawai’i during 2005-2019. We obtained sociodemographic, microbiologic, and geocoded residential data for all Kaiser Permanente Hawai’i beneficiaries. To estimate the risk of NTM pulmonary infection from exposure to groundwater constituents, we obtained groundwater data from three data sources: (1) Water Quality Portal; (2) the Hawai’i Department of Health; and (3) Brigham Young University, Department of Geological Science faculty. Data were aggregated by an aquifer and were associated with the corresponding beneficiary aquifer of residence. We used Poisson regression models with backward elimination to generate models for NTM infection risk as a function of groundwater constituents. We modeled two outcomes: Mycobacterium avium complex (MAC) species and Mycobacterium abscessus group species. RESULTS: For every 1-unit increase in the log concentration of vanadium in groundwater at the aquifer level, infection risk increased by 22% among MAC patients. We did not observe significant associations between water-quality constituents and infection risk among M. abscessus patients. CONCLUSIONS: Concentrations of vanadium in groundwater were associated with MAC pulmonary infection in O’ahu, Hawai’i. These findings provide evidence that naturally occurring trace metals influence the presence of NTM in water sources that supply municipal water systems."
  },
  {
    "objectID": "publications/Lipner_etal_2022.html#free-full-text",
    "href": "publications/Lipner_etal_2022.html#free-full-text",
    "title": "Vanadium in groundwater aquifers increases the risk of MAC pulmonary infection in O’ahu, Hawai’i.",
    "section": "Free Full Text",
    "text": "Free Full Text\nPubMed"
  },
  {
    "objectID": "publications/Cui_etal_2022.html",
    "href": "publications/Cui_etal_2022.html",
    "title": "Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities",
    "section": "",
    "text": "Cui Y, Eccles KM, Kwok RK, Joubert BR, Messier KP, Balshaw DM. Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities. Toxics. 2022 Jul 20;10(7):403. doi: 10.3390/toxics10070403. PMID: 35878308; PMCID: PMC9316943."
  },
  {
    "objectID": "publications/Cui_etal_2022.html#citation",
    "href": "publications/Cui_etal_2022.html#citation",
    "title": "Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities",
    "section": "",
    "text": "Cui Y, Eccles KM, Kwok RK, Joubert BR, Messier KP, Balshaw DM. Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities. Toxics. 2022 Jul 20;10(7):403. doi: 10.3390/toxics10070403. PMID: 35878308; PMCID: PMC9316943."
  },
  {
    "objectID": "publications/Cui_etal_2022.html#abstract",
    "href": "publications/Cui_etal_2022.html#abstract",
    "title": "Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities",
    "section": "Abstract",
    "text": "Abstract\nQuantifying the exposome is key to understanding how the environment impacts human health and disease. However, accurately, and cost-effectively quantifying exposure in large population health studies remains a major challenge. Geospatial technologies offer one mechanism to integrate high-dimensional environmental data into epidemiology studies, but can present several challenges. In June 2021, the National Institute of Environmental Health Sciences (NIEHS) held a workshop bringing together experts in exposure science, geospatial technologies, data science and population health to address the need for integrating multiscale geospatial environmental data into large population health studies. The primary objectives of the workshop were to highlight recent applications of geospatial technologies to examine the relationships between environmental exposures and health outcomes; identify research gaps and discuss future directions for exposure modeling, data integration and data analysis strategies; and facilitate communications and collaborations across geospatial and population health experts. This commentary provides a high-level overview of the scientific topics covered by the workshop and themes that emerged as areas for future work, including reducing measurement errors and uncertainty in exposure estimates, and improving data accessibility, data interoperability, and computational approaches for more effective multiscale and multi-source data integration, along with potential solutions."
  },
  {
    "objectID": "publications/Cui_etal_2022.html#free-full-text",
    "href": "publications/Cui_etal_2022.html#free-full-text",
    "title": "Integrating Multiscale Geospatial Environmental Data into Large Population Health Studies: Challenges and Opportunities",
    "section": "Free Full Text",
    "text": "Free Full Text\nPubMed\nToxics"
  },
  {
    "objectID": "publications/Jahnke_etal_2022.html",
    "href": "publications/Jahnke_etal_2022.html",
    "title": "Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists",
    "section": "",
    "text": "Jahnke JR, Messier KP, Lowe M, Jukic AM. Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists. Curr Epidemiol Rep. 2022 Jun;9(2):87-107. doi: 10.1007/s40471-022-00290-z. Epub 2022 May 13. PMID: 35754929; PMCID: PMC9229606."
  },
  {
    "objectID": "publications/Jahnke_etal_2022.html#citation",
    "href": "publications/Jahnke_etal_2022.html#citation",
    "title": "Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists",
    "section": "",
    "text": "Jahnke JR, Messier KP, Lowe M, Jukic AM. Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists. Curr Epidemiol Rep. 2022 Jun;9(2):87-107. doi: 10.1007/s40471-022-00290-z. Epub 2022 May 13. PMID: 35754929; PMCID: PMC9229606."
  },
  {
    "objectID": "publications/Jahnke_etal_2022.html#abstract",
    "href": "publications/Jahnke_etal_2022.html#abstract",
    "title": "Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists",
    "section": "Abstract",
    "text": "Abstract\nQuantifying the exposome is key to understanding how the environment impacts human health and disease. However, accurately, and cost-effectively quantifying exposure in large population health studies remains a major challenge. Geospatial technologies offer one mechanism to integrate high-dimensional environmental data into epidemiology studies, but can present several challenges. In June 2021, the National Institute of Environmental Health Sciences (NIEHS) held a workshop bringing together experts in exposure science, geospatial technologies, data science and population health to address the need for integrating multiscale geospatial environmental data into large population health studies. The primary objectives of the workshop were to highlight recent applications of geospatial technologies to examine the relationships between environmental exposures and health outcomes; identify research gaps and discuss future directions for exposure modeling, data integration and data analysis strategies; and facilitate communications and collaborations across geospatial and population health experts. This commentary provides a high-level overview of the scientific topics covered by the workshop and themes that emerged as areas for future work, including reducing measurement errors and uncertainty in exposure estimates, and improving data accessibility, data interoperability, and computational approaches for more effective multiscale and multi-source data integration, along with potential solutions."
  },
  {
    "objectID": "publications/Jahnke_etal_2022.html#free-full-text",
    "href": "publications/Jahnke_etal_2022.html#free-full-text",
    "title": "Ambient air pollution exposure assessments in fertility studies: A systematic review and guide for reproductive epidemiologists",
    "section": "Free Full Text",
    "text": "Free Full Text\nPubMed\nCurrent Epidemiology Reports"
  },
  {
    "objectID": "publications/Messier_and_Katzfuss_2021.html",
    "href": "publications/Messier_and_Katzfuss_2021.html",
    "title": "Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide",
    "section": "",
    "text": "Messier KP, Katzfuss M. Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide. Ann Appl Stat. 2021 Jun;15(2):688-710. doi: 10.1214/20-aoas1422. Epub 2021 Jul 12. PMID: 35069963; PMCID: PMC8774268."
  },
  {
    "objectID": "publications/Messier_and_Katzfuss_2021.html#citation",
    "href": "publications/Messier_and_Katzfuss_2021.html#citation",
    "title": "Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide",
    "section": "",
    "text": "Messier KP, Katzfuss M. Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide. Ann Appl Stat. 2021 Jun;15(2):688-710. doi: 10.1214/20-aoas1422. Epub 2021 Jul 12. PMID: 35069963; PMCID: PMC8774268."
  },
  {
    "objectID": "publications/Messier_and_Katzfuss_2021.html#abstract",
    "href": "publications/Messier_and_Katzfuss_2021.html#abstract",
    "title": "Scalable penalized spatiotemporal land-use regression for ground-level nitrogen dioxide",
    "section": "Abstract",
    "text": "Abstract\nNitrogen dioxide (NO2) is a primary constituent of traffic-related air pollution and has well established harmful environmental and human-health impacts. Knowledge of the spatiotemporal distribution of NO2 is critical for exposure and risk assessment. A common approach for assessing air pollution exposure is linear regression involving spatially referenced covariates, known as land-use regression (LUR). We develop a scalable approach for simultaneous variable selection and estimation of LUR models with spatiotemporally correlated errors, by combining a general-Vecchia Gaussian-process approximation with a penalty on the LUR coefficients. In comparisons to existing methods using simulated data, our approach resulted in higher model-selection specificity and sensitivity and in better prediction in terms of calibration and sharpness, for a wide range of relevant settings. In our spatiotemporal analysis of daily, US-wide, ground-level NO2 data, our approach was more accurate, and produced a sparser and more interpretable model. Our daily predictions elucidate spatiotemporal patterns of NO2 concentrations across the United States, including significant variations between cities and intra-urban variation. Thus, our predictions will be useful for epidemiological and risk-assessment studies seeking daily, national-scale predictions, and they can be used in acute-outcome health-risk assessments."
  }
]